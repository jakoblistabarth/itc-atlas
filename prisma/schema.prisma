// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id                     String         @id
  name                   String
  phdCandidatesMain      PhdCandidate[] @relation("DepartmentPhdMain")
  phdCandidatesSecondary PhdCandidate[] @relation("DepartmentPhdSecondary")
  employment             Employment[]   @relation("DepartmentEmployment")
}

model Contact {
  id           String         @id
  itcStudentId String?        @unique
  gender       String?
  dateOfBirth  DateTime?      @db.Date
  countryId    Int?
  country      Country?       @relation("ContactNationality", fields: [countryId], references: [id])
  phd          PhdCandidate[] @relation("ContactPhd")
  employee     Employee[]     @relation("ContactEmployee")
}

model PhdCandidate {
  id                    Int         @id @default(autoincrement())
  itcStudentId          String?
  contact               Contact?    @relation("ContactPhd", fields: [itcStudentId], references: [itcStudentId])
  departmentMainId      String?
  departmentMain        Department? @relation("DepartmentPhdMain", fields: [departmentMainId], references: [id])
  departmentSecondaryId String?
  departmentSecondary   Department? @relation("DepartmentPhdSecondary", fields: [departmentSecondaryId], references: [id])
  thesisTitle           String?
  graduated             Boolean?
  start                 DateTime?   @db.Date
  graduation            DateTime?   @db.Date
  promotion             DateTime?   @db.Date
  country               Country?    @relation("PhdCountry", fields: [countryId], references: [id])
  countryId             Int?
}

model Employee {
  id          Int          @id
  contactId   String?
  contact     Contact?     @relation("ContactEmployee", fields: [contactId], references: [id])
  dateOfBirth DateTime?    @db.Date
  countryId   Int?
  country     Country?     @relation("EmployeeCountry", fields: [countryId], references: [id])
  employment  Employment[]
}

model Employment {
  id           Int         @id
  start        DateTime?   @db.Date
  end          DateTime?   @db.Date
  employeeId   Int
  employee     Employee    @relation(fields: [employeeId], references: [id])
  departmentId String?
  department   Department? @relation("DepartmentEmployment", fields: [departmentId], references: [id])
}

model Country {
  id                       Int            @id @default(autoincrement())
  isoAlpha2                String         @db.Char(2)
  isoAlpha3                String         @db.Char(3)
  isoNum3                  String?        @db.Char(3)
  nameEn                   String?
  nameLongEn               String         @db.Text
  unRegionCode             String         @db.Char(3)
  unSubRegionCode          String         @db.Char(3)
  unIntermediateRegionCode String?        @db.Char(3)
  ldc                      Boolean
  lldc                     Boolean
  sids                     Boolean
  phdCandidates            PhdCandidate[] @relation("PhdCountry")
  contacts                 Contact[]      @relation("ContactNationality")
  employee                 Employee[]     @relation("EmployeeCountry")
}
