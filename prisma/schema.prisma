// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id                     String         @id
  name                   String
  phdCandidatesMain      PhdCandidate[] @relation("DepartmentPhdMain")
  phdCandidatesSecondary PhdCandidate[] @relation("DepartmentPhdSecondary")
  employments            Employment[]   @relation("DepartmentEmployment")
  projectMain            Project[]      @relation("DepartmentProjectMain")
  projectsSecondary      Project[]
  btors                  Btor[]         @relation("BtorsDepartment")
}

model Status {
  id            String         @id
  label         String
  applications  Application[]  @relation("StatusApplication")
  phdCandidates PhdCandidate[] @relation("StatusPhdCandidate")
}

//TODO: add city
model Applicant {
  id           String         @id
  itcStudentId String?        @unique
  gender       String?
  dateOfBirth  DateTime?      @db.Date
  countryId    Int?
  country      Country?       @relation("ApplicantNationality", fields: [countryId], references: [id])
  phds         PhdCandidate[] @relation("ApplicantPhd")
  employees    Employee[]     @relation("ApplicantEmployee")
  applications Application[]  @relation("ApplicantApplication")
}

// TODO: add model programms
// TODO: add programm relation to departments

// TODO: add programm relation to application
model Application {
  id                String    @id
  applicantId       String
  applicant         Applicant @relation("ApplicantApplication", fields: [applicantId], references: [id])
  courseId          String
  programmId        String?
  level             String?
  statusId          String
  status            Status    @relation("StatusApplication", fields: [statusId], references: [id])
  examYear          Int?
  enrollmentStart   DateTime? @db.Date
  enrollmentEnd     DateTime? @db.Date
  certificationDate DateTime? @db.Date
  sponsor           String?
  certificateType   String?
}

model PhdCandidate {
  id                    Int         @id @default(autoincrement())
  itcStudentId          String?
  applicant             Applicant?  @relation("ApplicantPhd", fields: [itcStudentId], references: [itcStudentId])
  departmentMainId      String?
  departmentMain        Department? @relation("DepartmentPhdMain", fields: [departmentMainId], references: [id])
  departmentSecondaryId String?
  departmentSecondary   Department? @relation("DepartmentPhdSecondary", fields: [departmentSecondaryId], references: [id])
  thesisTitle           String?
  start                 DateTime?   @db.Date
  graduation            DateTime?   @db.Date
  promotionYear         Int?
  statusId              String?
  status                Status?     @relation("StatusPhdCandidate", fields: [statusId], references: [id])
  countryId             Int?
  country               Country?    @relation("PhdCountry", fields: [countryId], references: [id])
}

model Employee {
  id          Int          @id
  applicantId String?
  applicant   Applicant?   @relation("ApplicantEmployee", fields: [applicantId], references: [id])
  dateOfBirth DateTime?    @db.Date
  countryId   Int?
  country     Country?     @relation("EmployeeCountry", fields: [countryId], references: [id])
  employment  Employment[]
}

model Employment {
  id           Int         @id
  start        DateTime?   @db.Date
  end          DateTime?   @db.Date
  employeeId   Int
  employee     Employee    @relation(fields: [employeeId], references: [id])
  departmentId String?
  department   Department? @relation("DepartmentEmployment", fields: [departmentId], references: [id])
}

model Country {
  id                       Int            @id @default(autoincrement())
  isoAlpha2                String         @db.Char(2)
  isoAlpha3                String         @db.Char(3)
  isoNum3                  String?        @db.Char(3)
  nameEn                   String?
  nameLongEn               String         @db.Text
  unRegionCode             String         @db.Char(3)
  unSubRegionCode          String         @db.Char(3)
  unIntermediateRegionCode String?        @db.Char(3)
  ldc                      Boolean
  lldc                     Boolean
  sids                     Boolean
  phdCandidates            PhdCandidate[] @relation("PhdCountry")
  applicants               Applicant[]    @relation("ApplicantNationality")
  employees                Employee[]     @relation("EmployeeCountry")
  projects                 Project[]
  btors                    Btor[]
}

model Project {
  id                   Int            @id @default(autoincrement())
  name                 String?        @db.Text
  nameShort            String?
  description          String?        @db.Text
  countries            Country[]
  start                DateTime?      @db.Date
  end                  DateTime?      @db.Date
  departmentMainId     String?
  departmentMain       Department?    @relation("DepartmentProjectMain", fields: [departmentMainId], references: [id])
  departmentsSecondary Department[]
  type                 ProjectType?
  status               ProjectStatus?
  leadOrganization     String?
  fundingOrganization  String?
}

enum ProjectType {
  Consulting
  Education
  Research
  Other
}

enum ProjectStatus {
  Finished
  Ongoing
  Proposed
  Rejected
}

model Btor {
  id           Int              @id @default(autoincrement())
  year         Int
  start        DateTime?        @db.Date
  end          DateTime?        @db.Date
  departmentId String?
  department   Department?      @relation("BtorsDepartment", fields: [departmentId], references: [id])
  countries    Country[]
  purpose      PurposeOfTravel?
}

enum PurposeOfTravel {
  Conference
  Project
  Other
  Workshop
  Fieldwork
  Consulting
  Meeting
  Research
  Acquisition
  Sabbatical
}
