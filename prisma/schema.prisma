// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id                String       @id
  name              String
  number            Int?         @unique
  phdsMain          Phd[]        @relation("DepartmentPhdMain")
  phdsSecondary     Phd[]        @relation("DepartmentPhdSecondary")
  employments       Employment[] @relation("DepartmentEmployment")
  projectMain       Project[]    @relation("DepartmentProjectMain")
  projectsSecondary Project[]
  btors             Btor[]       @relation("BtorsDepartment")
  flights2019       Flight2019[] @relation("Flight2019Department")
}

model Status {
  id           String        @id
  label        String
  applications Application[] @relation("StatusApplication")
  phds         Phd[]         @relation("StatusPhd")
}

//TODO: add city
model Applicant {
  id           String        @id
  itcStudentId String?       @unique
  gender       String?
  yearOfBirth  Int?
  countryId    Int?
  country      Country?      @relation("ApplicantNationality", fields: [countryId], references: [id])
  phds         Phd[]         @relation("ApplicantPhd")
  employees    Employee[]    @relation("ApplicantEmployee")
  applications Application[] @relation("ApplicantApplication")
}

// TODO: add model programms
// TODO: add programm relation to departments

// TODO: add programm relation to application
model Application {
  id                  String    @id
  applicantId         String
  applicant           Applicant @relation("ApplicantApplication", fields: [applicantId], references: [id])
  courseId            String
  programmId          String?
  level               String?
  statusId            String
  status              Status    @relation("StatusApplication", fields: [statusId], references: [id])
  examYear            Int?
  enrollmentStartYear Int?
  enrollmentEndYear   Int?
  enrolledDays        Int?
  certificationYear   Int?
  sponsor             String?
  certificateType     String?
}

model Phd {
  id                    String      @id
  itcStudentId          String?
  applicant             Applicant?  @relation("ApplicantPhd", fields: [itcStudentId], references: [itcStudentId])
  departmentMainId      String?
  departmentMain        Department? @relation("DepartmentPhdMain", fields: [departmentMainId], references: [id])
  departmentSecondaryId String?
  departmentSecondary   Department? @relation("DepartmentPhdSecondary", fields: [departmentSecondaryId], references: [id])
  thesisTitle           String?
  startYear             Int?
  graduationYear        Int?
  promotionYear         Int?
  statusId              String?
  status                Status?     @relation("StatusPhd", fields: [statusId], references: [id])
  countryId             Int?
  country               Country?    @relation("PhdCountry", fields: [countryId], references: [id])
}

model Employee {
  id          String       @id
  applicantId String?
  applicant   Applicant?   @relation("ApplicantEmployee", fields: [applicantId], references: [id])
  yearOfBirth Int?
  countryId   Int?
  country     Country?     @relation("EmployeeCountry", fields: [countryId], references: [id])
  employment  Employment[]
}

model Employment {
  id           String      @id
  startYear    Int?
  endYear      Int?
  employedDays Int?
  employeeId   String
  employee     Employee    @relation(fields: [employeeId], references: [id])
  departmentId String?
  department   Department? @relation("DepartmentEmployment", fields: [departmentId], references: [id])
}

model Country {
  id                       Int          @id @default(autoincrement())
  isoAlpha2                String       @db.Char(2)
  isoAlpha3                String       @db.Char(3)
  isoNum3                  String?      @db.Char(3)
  nameEn                   String?
  nameLongEn               String       @db.Text
  unRegionCode             String       @db.Char(3)
  unSubRegionCode          String       @db.Char(3)
  unIntermediateRegionCode String?      @db.Char(3)
  ldc                      Boolean
  lldc                     Boolean
  sids                     Boolean
  phds                     Phd[]        @relation("PhdCountry")
  applicants               Applicant[]  @relation("ApplicantNationality")
  employees                Employee[]   @relation("EmployeeCountry")
  projects                 Project[]
  btors                    Btor[]
  flights2019              Flight2019[] @relation("Flight2019Country")
}

model Project {
  id                   Int            @id @default(autoincrement())
  name                 String?        @db.Text
  nameShort            String?
  description          String?        @db.Text
  countries            Country[]
  start                DateTime?      @db.Date
  end                  DateTime?      @db.Date
  departmentMainId     String?
  departmentMain       Department?    @relation("DepartmentProjectMain", fields: [departmentMainId], references: [id])
  departmentsSecondary Department[]
  type                 ProjectType?
  status               ProjectStatus?
  leadOrganization     String?
  fundingOrganization  String?
}

enum ProjectType {
  Consulting
  Education
  Research
  Other
}

enum ProjectStatus {
  Completed
  Ongoing
  Cancelled
  Proposed
}

model Btor {
  id           Int              @id @default(autoincrement())
  year         Int
  start        DateTime?        @db.Date
  end          DateTime?        @db.Date
  departmentId String?
  department   Department?      @relation("BtorsDepartment", fields: [departmentId], references: [id])
  countries    Country[]
  purpose      PurposeOfTravel?
}

enum PurposeOfTravel {
  Conference
  Project
  Other
  Workshop
  Fieldwork
  Consulting
  Meeting
  Research
  Acquisition
  Sabbatical
}

model Flight2019 {
  id           Int         @id @default(autoincrement())
  departure    DateTime?   @db.Date
  arrival      DateTime?   @db.Date
  ref1         String? //TODO: ref1 is the OFI no.? 3rd digit -> external/internal, digit 4-5 -> department
  ref2         String? //TODO: ref2 courseNo?
  emissions    Float
  airportCodes String[]
  countryId    Int?
  departmentId String?
  department   Department? @relation("Flight2019Department", fields: [departmentId], references: [id])
  country      Country?    @relation("Flight2019Country", fields: [countryId], references: [id])
}
