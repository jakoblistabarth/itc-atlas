import { descending, max, scaleSqrt } from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import type {
  Feature,
  FeatureCollection,
  MultiPolygon,
  Point,
  Polygon,
} from "geojson";
import { nanoid } from "nanoid";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { Vector2 } from "three";
import { feature } from "topojson-client";
import Footer from "../../components/Footer";
import Heading, { Headings } from "../../components/Heading";
import BaseLayer from "../../components/map/BaseLayer";
import PointLabel from "../../components/map/PointLabel";
import PointSymbol from "../../components/map/PointSymbol";
import ProportionalCircleLegend from "../../components/map/ProportionalCircleLegend";
import getMapHeight from "../../lib/cartographic/getMapHeight";
import getCentroidByIsoCode from "../../lib/data/getCentroidByIsoCode";
import getCountries from "../../lib/data/getCountries";
import getCountryCodes from "../../lib/data/queries/country/getCountryCodes";
import getCountryWithApplicantCount, {
  CountryWithApplicantCount,
} from "../../lib/data/queries/country/getCountryWithApplicantCount";
import styles from "../../styles/home.module.css";
import { LabelPlacement } from "../../types/LabelPlacement";
import { SharedPageProps } from "../../types/Props";
import useMeasure from "react-use-measure";
import Tooltip from "../../components/Tooltip/Tooltip";
import { TooltipTrigger } from "../../components/Tooltip/TooltipTrigger";
import TooltipContent from "../../components/Tooltip/TooltipContent";

type Props = {
  applicants: CountryWithApplicantCount;
} & SharedPageProps;

const AlumniOrigin: NextPage<Props> = ({ applicants, neCountriesTopoJson }) => {
  const geographies = feature(
    neCountriesTopoJson,
    neCountriesTopoJson.objects.ne_admin_0_countries
  ) as FeatureCollection<MultiPolygon | Polygon>;

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: geographies.features
      .map((country) => {
        const isoCode = country.properties?.ADM0_A3_NL;
        const pos = getCentroidByIsoCode(isoCode);
        const feature: Feature<Point> = {
          type: "Feature",
          geometry: {
            type: "Point",
            coordinates: [pos?.x ?? 0, pos?.y ?? 0],
          },
          properties: {
            ...country.properties,
            alumniCount: applicants.find((d) => d.isoAlpha3 === isoCode)?._count
              .applicants,
          },
        };
        return feature;
      })
      .filter((feature: Feature) => feature.properties?.alumniCount)
      .sort((a: Feature, b: Feature) =>
        descending(a.properties?.alumniCount, b.properties?.alumniCount)
      ),
  };

  const [mapRef, { width }] = useMeasure();
  const dimension = {
    width,
    height: 0,
  };

  const projection = geoBertin1953();
  dimension.height = getMapHeight(dimension.width, projection);

  const alumniCount = points.features.map(
    (point) => point.properties?.alumniCount
  );
  const alumniMax = max(alumniCount);

  const scale = scaleSqrt()
    .domain([0, alumniMax])
    .range([0, dimension.width / 20]);

  return (
    <>
      <Head>
        <title>ITC&apos;s alumni country of origin </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>
          ITC&apos;s MSc alumni country of origin
        </Heading>

        <div
          style={{ padding: "0 1em", width: "100%", height: "100%" }}
          ref={mapRef}
        >
          {dimension.width > 0 && (
            <svg
              width={"100%"}
              height={"100%"}
              viewBox={`0 0 ${dimension.width} ${dimension.height}`}
            >
              <BaseLayer
                countries={neCountriesTopoJson}
                projection={projection}
              />
              <g id="alumni-countries-symbols">
                {points.features.map((point, idx) => (
                  <Tooltip key={`tooltip-country-${idx}`}>
                    <TooltipTrigger asChild>
                      <g>
                        <PointSymbol
                          key={nanoid()}
                          position={
                            new Vector2(
                              ...projection(point.geometry.coordinates)
                            )
                          }
                          radius={scale(point.properties?.alumniCount)}
                          fill={"teal"}
                          stroke={"teal"}
                          strokeWidth={0.5}
                          fillOpacity={0.1}
                        />
                      </g>
                    </TooltipTrigger>
                    <TooltipContent>
                      <strong>{point.properties?.NAME}</strong>
                      <br />
                      {point.properties?.alumniCount} MSc alumni
                    </TooltipContent>
                  </Tooltip>
                ))}
              </g>
              <g id="alumni-country-labels">
                {points.features.slice(0, 10).map((point) => {
                  const pos = new Vector2(
                    ...projection(point.geometry.coordinates)
                  );
                  return (
                    <PointLabel
                      key={nanoid()}
                      position={pos}
                      placement={LabelPlacement.CENTER}
                      fill={"teal"}
                      fontSize={10}
                    >
                      {point.properties?.NAME}
                    </PointLabel>
                  );
                })}
              </g>
              <ProportionalCircleLegend
                data={points.features.map(
                  (feature) => feature.properties?.alumniCount
                )}
                scaleRadius={scale}
                title={"Graduates per country"}
                unitLabel={"graduate"}
                showFunction={false}
              />
            </svg>
          )}
        </div>
      </main>
      <Footer />
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const [applicants, neCountriesTopoJson, countries] = await Promise.all([
    getCountryWithApplicantCount(),
    getCountries(),
    getCountryCodes(),
  ]);

  return {
    props: {
      applicants,
      neCountriesTopoJson,
      countries,
    },
  };
};

export default AlumniOrigin;
