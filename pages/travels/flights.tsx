import * as d3 from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import { Feature, FeatureCollection, Point } from "geojson";
import type { NextPage } from "next";
import Head from "next/head";
import type { Topology } from "topojson-specification";
import Heading, { Headings } from "../../components/heading";
import ArrowHead from "../../components/map/ArrowHead";
import BaseLayer from "../../components/map/BaseLayer";
import FlowLayer from "../../components/map/FlowLayer";
import FlowLegend from "../../components/map/FlowLegend";
import PointLabel from "../../components/map/PointLabel";
import PointLayer from "../../components/map/PointLayer";
import getFlowPoints from "../../lib/cartographic/getFlowPoints";
import getCountries from "../../lib/data/getCountries";
import getFlights from "../../lib/data/getFlights";
import styles from "../../styles/home.module.css";
import type { Flows } from "../../types/Flows";

type Props = {
  odMatrix: Flows;
  world: Topology;
};

const Flights: NextPage<Props> = ({ odMatrix, odMatrixMJ, world }) => {
  const projection = geoBertin1953();

  const flowConfig = {
    style: {
      fill: {
        color: "red",
        opacity: 0.1,
      },
    },
    scaleWidth: d3
      .scaleLinear()
      .domain(d3.extent(odMatrix.features.map((flow) => flow.properties.value)))
      .range([1, 15]),
  };

  const flowConfigMJ = {
    style: {
      fill: {
        color: "red",
      },
    },
    scaleWidth: d3
      .scaleLinear()
      .domain(
        d3.extent(odMatrixMJ.features.map((flow) => flow.properties.value))
      )
      .range([2, 4]),
  };

  const symbolStyle = {
    fill: {
      color: "grey",
      opacity: 1,
    },
    stroke: {
      width: 0,
    },
  };

  const airports = getODPoints(odMatrix);
  const airportsMJ = getODPoints(odMatrixMJ);

  // useEffect(() => {
  // setData(json.data)
  // setFilteredData(json.data)
  // });

  // const [selectedCountry, setSelectedCountry] = useState(null)
  // const [filterData, setFilteredData] = useState(null)
  // const [data, setData] = useState(null)

  //   setFilteredData(data.filter(d => d > selectedCountry))
  // }, [selectedCountry])

  return (
    <>
      <Head>
        <title>Flights</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's Travel Activity</Heading>
        <svg width={1020} height={600}>
          <defs>
            <ArrowHead id="arrowHead" color={flowConfig.style?.fill?.color} />
          </defs>
          <BaseLayer data={world} projection={projection} />
          <PointLayer
            projection={projection}
            data={airports}
            radius={1}
            style={symbolStyle}
          />
          <FlowLayer
            projection={projection}
            data={odMatrix}
            scaleWidth={flowConfig.scaleWidth}
            style={flowConfig.style}
          />

          {odMatrix.features.slice(0, 5).map((d) => {
            console.log(getFlowPoints(d));
            return (
              <PointLabel xy={getFlowPoints(d, projection)[1]}>
                <text>
                  <tspan fontWeight="bold">{d.properties?.od}</tspan>(
                  {d.properties?.value})
                </text>
              </PointLabel>
            );
          })}
          <FlowLegend
            data={odMatrix.features.map((flow) => flow.properties?.value)}
            scaleWidth={flowConfig.scaleWidth}
            title="No. of Flights in 2019"
            unitLabel="Flights"
          />
        </svg>

        <Heading Tag={Headings.H1}>
          ITC's Travel Activity Menno-Jan Kraak
        </Heading>
        <svg width={1020} height={600}>
          <defs>
            <ArrowHead id="arrowHead" color={flowConfig.style?.fill?.color} />
          </defs>
          <BaseLayer data={world} projection={projection} />
          <PointLayer
            projection={projection}
            data={airportsMJ}
            radius={1}
            style={symbolStyle}
          />
          <FlowLayer
            projection={projection}
            data={odMatrixMJ}
            scaleWidth={flowConfigMJ.scaleWidth}
            style={flowConfigMJ.style}
          />
          {airportsMJ.features.map((d) => (
            <PointLabel xy={projection(d.geometry.coordinates)}>
              <text>
                <tspan fontWeight="bold">{d.properties?.name}</tspan>(
                {d.properties?.value})
              </text>
            </PointLabel>
          ))}
          {odMatrixMJ.features.slice(5, 7).map((d) => (
            <PointLabel xy={getFlowPoints(d, projection)[1]}>
              <text>
                <tspan fontWeight="bold">{d.properties?.od}</tspan>(
                {d.properties?.value})
              </text>
            </PointLabel>
          ))}
          <FlowLegend
            data={odMatrixMJ.features.map((flow) => flow.properties?.value)}
            scaleWidth={flowConfigMJ.scaleWidth}
            title="No. of Flights in 2019"
            unitLabel="Flights"
          />
        </svg>

        {/* <select onChange={(e) => setSelectedCountry(e.target.value)}></select>
        <Navigation>
        <Flowmap thematicData={filteredData} geographicData="" />
        <Flowmap thematicData=" " geographicData="" /> */}
      </main>
    </>
  );
};

export async function getStaticProps() {
  const flights = await getFlights();
  const world = await getCountries();
  return {
    props: {
      odMatrix: flights.odMatrix,
      odMatrixMJ: flights.odMatrixMJ,
      world,
    },
  };
}

function getODPoints(odMatrix: Flows): FeatureCollection<Point> {
  const features = odMatrix.features.reduce(
    (points: Feature<Point>[], flow) => {
      flow.geometry.coordinates.forEach((coordinates, index) => {
        const name = index === 0 ? flow.properties?.o : flow.properties?.d;
        if (!points.map((p) => p.properties?.name).includes(name))
          points.push({
            type: "Feature",
            properties: {
              name,
              value: flow.properties?.value,
            },
            geometry: {
              type: "Point",
              coordinates: coordinates,
            },
          });
      });
      return points;
    },
    []
  );

  return {
    type: "FeatureCollection",
    features,
  };
}

export default Flights;
