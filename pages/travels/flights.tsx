import * as d3 from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import { nanoid } from "nanoid";
import type { NextPage } from "next";
import Head from "next/head";
import type { Topology } from "topojson-specification";
import Heading, { Headings } from "../../components/heading";
import BaseLayer from "../../components/map/BaseLayer";
import FlowLayer from "../../components/map/FlowLayer";
import FlowLegend from "../../components/map/FlowLegend";
import PointLabel from "../../components/map/PointLabel";
import getFlowPoints from "../../lib/cartographic/getFlowPoints";
import getCountries from "../../lib/data/getCountries";
import getFlights from "../../lib/data/getFlights";
import styles from "../../styles/home.module.css";
import type { ODMatrix } from "../../types/ODMatrix";
import { Appearance } from "../../types/Appearance";
import themes from "../../lib/styles/themes";
import getMapHeight from "../../lib/cartographic/getMapHeight";
import { MapOptions } from "../../types/MapOptions";

type Props = {
  odMatrix: ODMatrix;
  world: Topology;
};

const Flights: NextPage<Props> = ({ odMatrix, world }) => {
  const mapOptions: MapOptions = {
    projection: geoBertin1953(),
    width: 1280,
    height: 0,
    theme: themes.eth,
  };

  mapOptions.height = getMapHeight(mapOptions.width, mapOptions.projection);

  const flightsPerRoute = odMatrix.flows.features.map(
    (flow) => flow.properties?.value
  );
  const min = d3.min(flightsPerRoute);
  const max = d3.max(flightsPerRoute);

  const flowStyle: Appearance = {
    opacity: 0.2,
    stroke: "red",
    markerEnd: "ArrowHead",
  };
  const scaleWidth = d3.scaleLinear().domain([min, max]).range([1, 15]);

  const pointStyle: Appearance = {
    fill: "grey",
    fillOpacity: 1,
    strokeWidth: 0,
  };

  // useEffect(() => {
  // setData(json.data)
  // setFilteredData(json.data)
  // });

  // const [selectedCountry, setSelectedCountry] = useState(null)
  // const [filterData, setFilteredData] = useState(null)
  // const [data, setData] = useState(null)

  //   setFilteredData(data.filter(d => d > selectedCountry))
  // }, [selectedCountry])

  return (
    <>
      <Head>
        <title>Flights</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's Travel Activity</Heading>

        <svg width={mapOptions.width} height={mapOptions.height}>
          <BaseLayer
            data={world}
            theme={mapOptions.theme}
            projection={mapOptions.projection}
          />
          <FlowLayer
            projection={mapOptions.projection}
            data={odMatrix}
            scaleWidth={scaleWidth}
            flowStyle={flowStyle}
            pointStyle={pointStyle}
          />

          {odMatrix.flows.features.slice(0, 5).map((d) => {
            const flowPoints = getFlowPoints(d, mapOptions.projection);
            const labelPosition = flowPoints?.[1];
            return (
              labelPosition && (
                <PointLabel key={nanoid()} xy={labelPosition}>
                  <text>
                    <tspan fontWeight="bold">{d.properties?.od}</tspan>(
                    {d.properties?.value})
                  </text>
                </PointLabel>
              )
            );
          })}
          <FlowLegend
            data={odMatrix.flows.features.map((flow) => flow.properties?.value)}
            scaleWidth={scaleWidth}
            title="No. of Flights in 2019"
            unitLabel="Flights"
            style={flowStyle}
          />
        </svg>

        {/* <select onChange={(e) => setSelectedCountry(e.target.value)}></select>
        <Navigation>
        <Flowmap thematicData={filteredData} geographicData="" />
        <Flowmap thematicData=" " geographicData="" /> */}
      </main>
    </>
  );
};

export async function getStaticProps() {
  const flights = await getFlights();
  const world = await getCountries();
  return {
    props: {
      odMatrix: flights.odMatrix,
      world,
    },
  };
}

export default Flights;
