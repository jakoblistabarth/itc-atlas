import * as d3 from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import { nanoid } from "nanoid";
import type { NextPage } from "next";
import Head from "next/head";
import type { Topology } from "topojson-specification";
import Heading, { Headings } from "../../components/heading";
import ArrowHead from "../../components/map/ArrowHead";
import BaseLayer from "../../components/map/BaseLayer";
import FlowLayer from "../../components/map/FlowLayer";
import FlowLegend from "../../components/map/FlowLegend";
import PointLabel from "../../components/map/PointLabel";
import getFlowPoints from "../../lib/cartographic/getFlowPoints";
import getCountries from "../../lib/data/getCountries";
import getFlights from "../../lib/data/getFlights";
import styles from "../../styles/home.module.css";
import type { ODMatrix } from "../../types/ODMatrix";

type Props = {
  odMatrix: ODMatrix;
  world: Topology;
};

const Flights: NextPage<Props> = ({ odMatrix, world }) => {
  const projection = geoBertin1953();

  const flightsPerRoute = odMatrix.flows.features.map(
    (flow) => flow.properties?.value
  );
  const min = d3.min(flightsPerRoute);
  const max = d3.max(flightsPerRoute);

  const flowConfig = {
    style: {
      opacity: 0.2,
      stroke: {
        color: "red",
      },
      markerEnd: "arrowHead",
    },
    scaleWidth: d3.scaleLinear().domain([min, max]).range([1, 15]),
  };

  const pointStyle = {
    fill: {
      color: "grey",
      opacity: 1,
    },
    stroke: {
      width: 0,
    },
  };

  // useEffect(() => {
  // setData(json.data)
  // setFilteredData(json.data)
  // });

  // const [selectedCountry, setSelectedCountry] = useState(null)
  // const [filterData, setFilteredData] = useState(null)
  // const [data, setData] = useState(null)

  //   setFilteredData(data.filter(d => d > selectedCountry))
  // }, [selectedCountry])

  return (
    <>
      <Head>
        <title>Flights</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's Travel Activity</Heading>

        <svg width={1020} height={600}>
          <defs>
            <ArrowHead
              id={flowConfig.style.markerEnd}
              color={flowConfig.style?.stroke?.color}
            />
          </defs>
          <BaseLayer data={world} projection={projection} />
          <FlowLayer
            projection={projection}
            data={odMatrix}
            scaleWidth={flowConfig.scaleWidth}
            flowStyle={flowConfig.style}
            pointStyle={pointStyle}
          />

          {odMatrix.flows.features.slice(0, 5).map((d) => {
            const flowPoints = getFlowPoints(d, projection);
            const labelPosition = flowPoints?.[1];
            return (
              labelPosition && (
                <PointLabel key={nanoid()} xy={labelPosition}>
                  <text>
                    <tspan fontWeight="bold">{d.properties?.od}</tspan>(
                    {d.properties?.value})
                  </text>
                </PointLabel>
              )
            );
          })}
          <FlowLegend
            data={odMatrix.flows.features.map((flow) => flow.properties?.value)}
            scaleWidth={flowConfig.scaleWidth}
            title="No. of Flights in 2019"
            unitLabel="Flights"
            style={flowConfig.style}
          />
        </svg>

        {/* <select onChange={(e) => setSelectedCountry(e.target.value)}></select>
        <Navigation>
        <Flowmap thematicData={filteredData} geographicData="" />
        <Flowmap thematicData=" " geographicData="" /> */}
      </main>
    </>
  );
};

export async function getStaticProps() {
  const flights = await getFlights();
  const world = await getCountries();
  return {
    props: {
      odMatrix: flights.odMatrix,
      world,
    },
  };
}

export default Flights;
