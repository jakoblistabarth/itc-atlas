import { Employee, PrismaClient } from "@prisma/client";
import * as d3 from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import type { Feature, FeatureCollection, Point } from "geojson";
import { nanoid } from "nanoid";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { Vector2 } from "three";
import * as topojson from "topojson-client";
import Footer from "../../components/Footer";
import Heading, { Headings } from "../../components/Heading";
import BaseLayer from "../../components/map/BaseLayer";
import PointSymbol from "../../components/map/PointSymbol";
import ProportionalCircleLegend from "../../components/map/ProportionalCircleLegend";
import getMapHeight from "../../lib/cartographic/getMapHeight";
import getCountries from "../../lib/data/getCountries";
import styles from "../../styles/home.module.css";
import { SharedPageProps } from "../../types/Props";

type Props = {
  employee: Employee[];
} & SharedPageProps;

const StaffOrigin: NextPage<Props> = ({ employee, neCountriesTopoJson }) => {
  const neCountriesGeoJson = topojson.feature(
    neCountriesTopoJson,
    neCountriesTopoJson.objects.ne_admin_0_countries
  );

  const count = d3.group(employee, (d) => d.country?.isoAlpha3);
  const dimension = {
    width: 1280,
    height: 0,
  };

  const projection = geoBertin1953();
  dimension.height = getMapHeight(dimension.width, projection);

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: neCountriesGeoJson.features
      .map((feature) => {
        const employeeCount = count.get(feature.properties?.ADM0_A3_NL)?.length;
        const pointFeature: Feature<Point> = {
          type: "Feature",
          properties: {
            employeeCount,
            ...feature.properties,
          },
          geometry: {
            type: "Point",
            coordinates: [
              d3.geoCentroid(feature)[0],
              d3.geoCentroid(feature)[1],
            ],
          },
        };
        return pointFeature;
      })
      .filter((feature: Feature) => feature.properties?.employeeCount)
      .sort((a: Feature, b: Feature) =>
        d3.descending(a.properties?.employeeCount, b.properties?.employeeCount)
      ),
  };

  const employeeCount = points.features.map(
    (point) => point.properties?.employeeCount
  );
  const min = d3.min(employeeCount);
  const max = d3.max(employeeCount);

  const scale = d3
    .scaleSqrt()
    .domain([min, max])
    .range([1, dimension.width / 30]);

  return (
    <>
      <Head>
        <title>ITC&apos;s employee origin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC&apos;s employee origin</Heading>
        <svg width={dimension.width} height={dimension.height}>
          <BaseLayer countries={neCountriesTopoJson} projection={projection} />
          <g id="symbols">
            {points.features.map((point) => {
              const pos = projection(point.geometry.coordinates);
              return (
                <PointSymbol
                  key={nanoid()}
                  position={new Vector2(pos[0], pos[1])}
                  radius={scale(point.properties?.employeeCount)}
                />
              );
            })}
          </g>
          <ProportionalCircleLegend
            data={points.features.map(
              (feature) => feature.properties?.employeeCount
            )}
            scaleRadius={scale}
            title={"Staff members per Country"}
            unitLabel={"Staff member"}
          />
        </svg>
      </main>
      <Footer />
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const prisma = new PrismaClient();
  const [employee, neCountriesTopoJson, countries] = await Promise.all([
    prisma.employee.findMany({
      include: { country: true },
    }),
    getCountries(),
    prisma.country.findMany(),
  ]);

  return {
    props: {
      employee,
      countries,
      neCountriesTopoJson,
    },
  };
};

export default StaffOrigin;
