import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { geoSatellite } from "d3-geo-projection";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import getCountries from "../../lib/data/getCountries";
import getCountryWithProjectCount, {
  CountryWithProjectCount,
} from "../../lib/data/queries/country/getCountryWithProjectCount";
import BaseLayer from "../../components/map/BaseLayer";
import { Container, Heading } from "theme-ui";
import { FeatureCollection, Feature, Point } from "geojson";
import { nanoid } from "nanoid";
import themes, { ThemeNames } from "../../lib/styles/themes";
import ChoroplethSymbol from "../../components/map/PolygonSymbol";
import { MapOptions } from "../../types/MapOptions";
import PatternDots from "../../components/defs/patterns/PatternDots";
import IsoUnit from "../../components/map/IsoUnit";
import { SharedPageProps } from "../../types/Props";
import defaultTheme from "../../lib/styles/themes/defaultTheme";
import getCountryCodes from "../../lib/data/queries/country/getCountryCodes";

type Props = {
  countriesWithProjectCount: CountryWithProjectCount;
} & SharedPageProps;

const ProjectCountries: NextPage<Props> = ({
  countriesWithProjectCount,
  countries,
  neCountriesTopoJson,
}) => {
  const mapOptions: MapOptions = {
    bounds: {
      width: 1080,
      height: 550,
    },
    projection: geoSatellite()
      .scale(1280)
      .rotate([-20, -15, 180])
      .tilt(10)
      .distance(2)
      .translate([1080 / 2, 750]),
    theme: themes.get(ThemeNames.RAISZ) ?? defaultTheme,
  };

  const minHeight = 2;
  const maxHeight = 150;

  const countrySelection = countriesWithProjectCount.filter(
    (d) => d.unRegionCode === "002"
  );

  const projectCount = countrySelection.map((d) => d._count.projects);
  const minRange = d3.min(projectCount) ?? 0; // TODO: meaningful fallback values
  const maxRange = d3.max(projectCount) ?? 10;

  const scale = d3
    .scaleLinear()
    .domain([minRange, maxRange])
    .range([minHeight, maxHeight]);

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: topojson
      .feature(
        neCountriesTopoJson,
        neCountriesTopoJson.objects.ne_admin_0_countries
      )
      .features.map((feature) => {
        const value = countrySelection.find(
          (d) => d.isoAlpha3 === feature.properties?.ADM0_A3_NL
        )?._count.projects;
        const pointFeature: Feature<Point> = {
          type: "Feature",
          properties: {
            projectCount: value,
            ...feature.properties,
          },
          geometry: {
            type: "Point",
            coordinates: [
              d3.geoCentroid(feature)[0],
              d3.geoCentroid(feature)[1],
            ],
          },
        };
        return pointFeature;
      })
      .filter((feature) => feature.properties?.projectCount),
  };

  const polygons = {
    type: "FeatureCollection",
    features: topojson
      .feature(
        neCountriesTopoJson,
        neCountriesTopoJson.objects.ne_admin_0_countries
      )
      .features.filter((feature) => {
        const matchedCountry = countries.find(
          (d) => d.isoAlpha3 === feature.properties?.ADM0_A3_NL
        );
        const highlight = matchedCountry?.ldc;
        return highlight;
      }),
  };

  return (
    <>
      <Head>
        <title>ITC&apos;s Projects in Sub-Sahran Africa</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Container>
        <main>
          <Heading as="h1">ITC&apos;s projects in Sub-Saharan Africa</Heading>
          <svg
            width={mapOptions.bounds.width}
            height={mapOptions.bounds.height}
          >
            <defs>
              <PatternDots
                style={mapOptions.theme.choropleth?.pattern}
                angle={0}
                spacing={2}
                fill={"red"}
              ></PatternDots>
            </defs>
            <BaseLayer
              countries={neCountriesTopoJson}
              projection={mapOptions.projection}
              theme={mapOptions.theme}
              labels
            />
            <g className="choroplethLayer">
              {polygons.features.map((feature) => (
                <ChoroplethSymbol
                  key={nanoid()}
                  projection={mapOptions.projection}
                  feature={feature}
                  fill={"url(#Dots)"}
                />
              ))}
            </g>
            <g className="symbolLayer">
              {points.features.map((feature) => {
                const xy = mapOptions.projection(
                  feature.geometry.coordinates as [number, number]
                );
                return (
                  xy && (
                    <IsoUnit
                      key={nanoid()}
                      xy={xy}
                      scale={scale}
                      value={feature.properties?.projectCount}
                      side={5}
                      style={{ ...mapOptions.theme.symbol, fillOpacity: 1 }}
                      label={true}
                    />
                  )
                );
              })}
            </g>
          </svg>
        </main>
      </Container>
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const countriesWithProjectCount = await getCountryWithProjectCount();
  const countries = await getCountryCodes();
  const neCountriesTopoJson = getCountries("50m");

  return {
    props: {
      countriesWithProjectCount,
      countries,
      neCountriesTopoJson,
    },
  };
};

export default ProjectCountries;
