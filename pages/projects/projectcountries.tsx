import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/home.module.css";
import { geoBertin1953 } from "d3-geo-projection";
import * as d3 from "d3";
import * as topojson from "topojson-client";
import { Project } from "../../types/Project";
import getCountries from "../../lib/getCountries";
import getProjects from "../../lib/getProjects";
import BaseLayer from "../../components/map/BaseLayer";
import Heading, { Headings } from "../../components/heading";
import PointLayer from "../../components/map/PointLayer";
import { FeatureCollection, Feature, Point, MultiPolygon } from "geojson";

type Props = {
  projects: Project[];
  world: Awaited<ReturnType<typeof getCountries>>;
};

const ProjectCountries: NextPage<Props> = ({ projects, world }) => {
  const projection = geoBertin1953();

  const count = d3
    .rollups(
      projects.reduce((acc: [], proj) => {
        acc.push(...proj.countries); // or proj.allCountries
        return acc;
      }, []),
      (v) => v.length,
      (d) => d
    )
    .sort((a, b) => d3.descending(a[1], b[1]));
  const projectsCountry = new Map(count);

  const minRadius = 1;
  const maxRadius = 30;

  const scale = d3
    .scaleSqrt()
    .domain(d3.extent(Array.from(projectsCountry.values())))
    .range([minRadius, maxRadius]);

  const style = {
    fill: {
      color: "red",
      opacity: 0.1,
    },
    stroke: {
      color: "blue",
    },
  };

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: topojson
      .feature(world, world.objects.countries)
      .features.map((feature: Feature<MultiPolygon>) => {
        const value = projectsCountry.get(feature.properties.iso3code);
        return {
          type: "Feature",
          properties: {
            projectCount: value,
            ...feature.properties,
          },
          geometry: {
            coordinates: [
              d3.geoCentroid(feature)[0],
              d3.geoCentroid(feature)[1],
            ],
          },
        };
      })
      .filter((feature) => feature.properties.projectCount),
  };

  return (
    <>
      <Head>
        <title>Projects per Country</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>Projects per Country</Heading>
        <svg width={1020} height={600}>
          <BaseLayer data={world} projection={projection} />
          <PointLayer
            data={points}
            projection={projection}
            scale={scale}
            style={style}
            value="projectCount"
          />
        </svg>
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const projects = await getProjects();

  const projectSelection = projects.filter(
    (
      row
    ): row is Omit<Project, "dateStart" | "dateEnd" | "projectID"> & {
      dateStart: string;
      dateEnd: string;
      projectID: string;
    } => typeof row.dateStart === "string" && typeof row.dateEnd === "string"
  );

  projectSelection.sort((a, b) =>
    d3.ascending(new Date(a.dateStart), new Date(b.dateStart))
  );

  const world = await getCountries();

  return {
    props: {
      projects: projectSelection,
      world,
    },
  };
};

export default ProjectCountries;
