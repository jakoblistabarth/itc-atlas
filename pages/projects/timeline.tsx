import * as d3 from "d3";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useRef } from "react";
import { dateLongFormat } from "../../lib/formaters";
import getProjects from "../../lib/getProjects";
import getUnsdCodes from "../../lib/getUnsdCodes";
import isPartOfUnsdGroup from "../../lib/isPartOfUnsdGroup";
import styles from "../../styles/home.module.css";
import { Project, ProjectStatus } from "../../types/Project";
import { UnGroupings, UnLevel } from "../../types/UnsdCodes";

type TimelineProps = {
  projects: Project[];
  countries: any[]; //TODO create type for codes
};

const Timeline: NextPage<TimelineProps> = ({ projects, countries }) => {
  // QUESTION: such filtering in static props or here?
  const projectsSelection = projects.filter(
    (
      row
    ): row is Omit<Project, "dateStart" | "dateEnd" | "projectID"> & {
      dateStart: string;
      dateEnd: string;
      projectID: string;
    } => typeof row.dateStart === "string" && typeof row.dateEnd === "string"
  );

  projectsSelection.sort((a, b) =>
    d3.ascending(new Date(a.dateStart), new Date(b.dateStart))
  );

  const margin = {
      top: 10,
      right: 30,
      bottom: 80,
      left: 250,
    },
    width = 1080 - margin.left - margin.right,
    height = 2000 - margin.top - margin.bottom;

  const x = d3
    .scaleTime()
    .range([0, width])
    .domain([
      // TODO: specify fallbacks
      d3.min(projectsSelection.map((d) => new Date(d.dateStart))) ??
        new Date("1950"),
      d3.max(projectsSelection.map((d) => new Date(d.dateEnd))) ?? new Date(),
    ]);

  const y = d3
    .scalePoint()
    .range([0, height])
    .domain(projectsSelection.map((d) => d.projectID))
    .padding(1);

  useEffect(() => {
    const svgEl = d3
      .select(svgRef.current)
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", `translate(${margin.left}, ${margin.top})`);

    svgEl
      .append("g")
      .attr("transform", `translate(0,${height})`)
      .call(d3.axisBottom(x))
      .selectAll("text")
      .style("text-anchor", "center");

    svgEl.append("g").call(d3.axisLeft(y));

    // Lines
    svgEl
      .append("g")
      .attr("id", "lines")
      .selectAll("line")
      .data(projectsSelection)
      .enter()
      .append("line")
      .attr("x1", (d) => x(new Date(d.dateStart)))
      .attr("x2", (d) => x(new Date(d.dateEnd)))
      .attr("y1", (d) => y(d.projectID) ?? null)
      .attr("y2", (d) => y(d.projectID) ?? null)
      .attr("stroke", (d) =>
        d.countries.some((e) => {
          return isPartOfUnsdGroup(countries, e, UnGroupings.LDC);
        })
          ? "red"
          : "black"
      )
      .attr("stroke-dasharray", (d) =>
        new Date(d.dateEnd) < new Date() ? "none" : "1"
      )
      .attr("stroke-opacity", 0.5)
      .attr("stroke-width", (d) =>
        d.status === ProjectStatus.Undone ? "1px" : "2px"
      )
      .append("svg:title")
      .text(
        (d) =>
          d.projectShortName +
          " (" +
          dateLongFormat(new Date(d.dateStart)) +
          "-" +
          dateLongFormat(new Date(d.dateEnd)) +
          ")"
      );
  });

  const svgRef = useRef(null);

  return (
    <>
      <Head>
        <title>Projects</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <h1>Projects</h1>
        <p>681 projects</p>
        <svg ref={svgRef} width={1080} height={2000} />
      </main>
    </>
  );
};

export const getStaticProps = async () => {
  const projects = await getProjects();
  const countries = await getUnsdCodes(UnLevel.Countries);

  return {
    props: {
      projects,
      countries,
    },
  };
};

export default Timeline;
