import * as d3 from "d3";
import { nanoid } from "nanoid";
import type { NextPage } from "next";
import Head from "next/head";
import Heading, { Headings } from "../../components/heading";
import getProjects from "../../lib/data/getProjects";
import getUnsdCountries from "../../lib/data/getUnsdCountries";
import isPartOfUnsdGroup from "../../lib/isPartOfUnsdGroup";
import { fDateYear } from "../../lib/utilities/formaters";
import styles from "../../styles/home.module.css";
import { Project, ProjectStatus } from "../../types/Project";
import { AreaCode, UnGroupings } from "../../types/UnsdCodes";

type TimelineProps = {
  projects: Project[];
  countries: AreaCode[];
};

const Timeline: NextPage<TimelineProps> = ({ projects, countries }) => {
  // QUESTION: such filtering in static props or here?
  const projectsSelection = projects.filter(
    (
      row
    ): row is Omit<Project, "dateStart" | "dateEnd" | "projectID"> & {
      dateStart: string;
      dateEnd: string;
      projectID: string;
    } => typeof row.dateStart === "string" && typeof row.dateEnd === "string"
  );

  projectsSelection.sort((a, b) =>
    d3.ascending(new Date(a.dateStart), new Date(b.dateStart))
  );

  const wrapper = {
      width: 1280,
      height: 3500,
    },
    margin = {
      top: 30,
      right: 30,
      bottom: 30,
      left: 30,
    },
    bounds = {
      width: wrapper.width - margin.left - margin.right,
      height: wrapper.height - margin.top - margin.bottom,
    };

  const minDate =
    d3.min(projectsSelection.map((d) => new Date(d.dateStart))) ??
    new Date("1950");
  const maxDate =
    d3.max(projectsSelection.map((d) => new Date(d.dateEnd))) ?? new Date();

  const x = d3.scaleTime().range([0, bounds.width]).domain([minDate, maxDate]);

  const y = d3
    .scalePoint()
    .range([0, bounds.height])
    .domain(projectsSelection.map((d) => d.projectID));

  return (
    <>
      <Head>
        <title>Projects</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>Projects</Heading>
        <p>{projectsSelection.length} projects</p>
        <div style={{ overflowX: "scroll", maxHeight: "300px" }}>
          <svg width={wrapper.width} height={wrapper.height}>
            <g transform={`translate(${margin.left}, ${margin.top})`}>
              <g>
                {x.ticks().map((tick) => (
                  <g key={nanoid()}>
                    <line
                      x1={x(tick)}
                      x2={x(tick)}
                      y1={0}
                      y2={bounds.height}
                      strokeWidth={0.5}
                      stroke={"lightgrey"}
                    />
                    <text
                      fontSize={10}
                      textAnchor="middle"
                      y={-margin.top / 2}
                      x={x(tick)}
                    >
                      {fDateYear(tick)}
                    </text>
                    <text
                      fontSize={10}
                      textAnchor="middle"
                      y={bounds.height + margin.top / 2}
                      x={x(tick)}
                    >
                      {fDateYear(tick)}
                    </text>
                  </g>
                ))}
                {projectsSelection.map((project) => (
                  <g key={nanoid()}>
                    <g transform={`translate(0,${y(project.projectID)})`}>
                      <line
                        x1={x(new Date(project.dateStart))}
                        x2={x(new Date(project.dateEnd))}
                        y1={0}
                        y2={0}
                        stroke={
                          project.countries.some((e) => {
                            return isPartOfUnsdGroup(
                              countries,
                              e,
                              UnGroupings.LDC
                            );
                          })
                            ? "red"
                            : "black"
                        }
                        strokeWidth={
                          project.status === ProjectStatus.Ongoing ? 1 : 2
                        }
                        strokeLinecap={"round"}
                        fill={"none"}
                      ></line>
                      {/* <text fontSize={7}>{project.projectShortName}</text> */}
                    </g>
                  </g>
                ))}
              </g>
            </g>
          </svg>
        </div>
      </main>
    </>
  );
};

export const getStaticProps = async () => {
  const projects = await getProjects();
  const countries = await getUnsdCountries();

  return {
    props: {
      projects,
      countries,
    },
  };
};

export default Timeline;
