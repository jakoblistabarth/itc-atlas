import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import Timeline from "../../components/charts/timeline/Timeline";
import Heading, { Headings } from "../../components/Heading";
import SummaryTable from "../../components/SummaryTable";
import getApplicantsByCountry from "../../lib/data/getApplicantsByCountry";
import getBTORsByCountry from "../../lib/data/getBTORsByCountry";
import getPhdCandidatesByCountry from "../../lib/data/getPhdCandidatesByCountry";
import getProjectsByCountry from "../../lib/data/getProjectsByCountry";
import getTravelsByCountry from "../../lib/data/getTravelsByCountry";
import DataFrame from "../../lib/DataFrame/DataFrame";
import styles from "../../styles/home.module.css";
import { Applicant } from "../../types/Applicant";
import { PhdCandidate } from "../../types/PhdCandidate";
import { Project } from "../../types/Project";
import { TimelineEvent } from "../../types/TimelineEvent";
import { BTOR, Travel } from "../../types/Travels";

type Props = {
  projects: Project[];
  phdCandidates: PhdCandidate[];
  applicants: Applicant[];
  travels: Travel[];
  btors: BTOR[];
};

const ProjectCountries: NextPage<Props> = ({
  projects,
  phdCandidates,
  applicants,
  travels,
  btors,
}) => {
  const projectEvents: TimelineEvent[] = projects.flatMap((project) => {
    if (!project.dateStart || !project.dateEnd) return [];
    return {
      name: project.projectName ?? "unnamed project",
      yOffset: project.projectID ?? "",
      dateStart: new Date(project.dateStart),
      dateEnd: new Date(project.dateEnd),
    };
  });

  const phdCandidateEvents: TimelineEvent[] = phdCandidates.flatMap((phd) => {
    if (!phd.dateStart || !phd.dateEnd) return [];
    return {
      name: phd.thesisTitle ?? "unnamed project",
      yOffset: phd.thesisTitle ?? "",
      dateStart: new Date(phd.dateStart),
      dateEnd: new Date(phd.dateEnd),
    };
  });

  console.log(applicants);
  console.log("travels", travels);
  console.log("btors", btors);

  const commonDomain = [new Date(1950), new Date()] as [Date, Date];

  return (
    <>
      <Head>
        <title>ITC's Impact in Indonesia</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's projects in Indonesia</Heading>
        <svg width={1000} height={700}>
          <Timeline
            position={[0, 0]}
            width={1000}
            height={350}
            events={projectEvents}
            domain={commonDomain}
            grid
          />
          <Timeline
            position={[0, 350]}
            width={1000}
            height={200}
            events={phdCandidateEvents}
            domain={commonDomain}
            grid
          />
        </svg>
        <SummaryTable data={new DataFrame(btors)} />
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const [projects, phdCandidates, applicants, travels, btors] =
    await Promise.all([
      getProjectsByCountry("IDN"),
      getPhdCandidatesByCountry("IDN"),
      // getApplicantsByCountry("Indonesia"),
      "applicants",
      getTravelsByCountry("Indonesia"),
      getBTORsByCountry("Indonesia"),
    ]);

  return {
    props: {
      projects,
      phdCandidates,
      applicants,
      travels,
      btors,
    },
  };
};

export default ProjectCountries;
