import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/home.module.css";
import Footer from "../../components/Footer";
import Heading, { Headings } from "../../components/Heading";
import getCourseGenealogy from "../../lib/data/getCourseGenealogy";
import {
  linkHorizontal,
  scaleTime,
  scalePoint,
  ascending,
  max,
  scaleOrdinal,
  ScaleOrdinal,
  descending,
  scaleSqrt,
} from "d3";
import { nanoid } from "nanoid";
import { CourseGenealogy } from "../../types/CourseGenealogy";
import Timeline from "../../components/charts/timeline/Timeline";
import TimelineGrid from "../../components/charts/timeline/TimelineGrid";
import EventPoint from "../../components/charts/timeline/EventPoint";
import PointLabel from "../../components/map/PointLabel";
import { Vector2 } from "three";
import { LabelPlacement } from "../../types/LabelPlacement";
import ProportionalSymbolLegend from "../../components/map/ProportionalSymbolLegend";
import { fDateYear } from "../../lib/utilities/formaters";
import Cross from "../../components/shapes/Cross";

type Props = {
  courseGenealogy: CourseGenealogy;
};

const CourseGenealogy: NextPage<Props> = ({ courseGenealogy }) => {
  const linkGenerator = linkHorizontal();

  courseGenealogy.nodes.forEach((node) => {
    node.dateStart = new Date(node.dateStart);
    node.size = parseInt(node.size);
  });

  courseGenealogy.links.forEach((link) => {
    // const start =
    //   link.start === link.end
    //     ? new Date((parseInt(link.start) - 1).toString())
    //     : new Date(link.start.toString());
    // link.start = start;
    link.start = new Date(link.start.toString());
    link.end = new Date(link.end.toString());
  });

  const width = 1280;
  const height = 800;
  const margin = 40;
  const xScale = scaleTime()
    .domain([new Date("1949"), new Date("2022")])
    .range([margin, width - margin])
    .nice();
  const yScale = scalePoint()
    .range([margin, height - margin])
    .domain(
      courseGenealogy.links
        .sort((a, b) => descending(new Date(a.start), new Date(b.start)))
        .sort((a, b) =>
          ascending(parseInt(a.stem.toString()), parseInt(b.stem.toString()))
        )
        .flatMap((d) => [d.source, d.target])
    );
  const rScale = scaleSqrt()
    .domain([0, max(courseGenealogy.nodes, (n) => n.size) ?? 0])
    .range([0, 20]);

  const stems = courseGenealogy.links.reduce((stems, s) => {
    if (!stems.includes(s.stem)) stems.push(s.stem);
    return stems;
  }, [] as string[]);

  const colorScale = scaleOrdinal<string, string>()
    .domain(stems)
    .range([
      "orange",
      "red",
      "darkred",
      "purple",
      "cornflowerblue",
      "darkslateblue",
    ]);

  return (
    <>
      <Head>
        <title>ITC's courses</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>Course Genealogy</Heading>
        <Heading Tag={Headings.H2}>
          Graduates of M.Sc. courses over time
        </Heading>
        <svg width={width} height={height}>
          <Timeline>
            <TimelineGrid scale={xScale} height={height} margin={margin} />
            <g id={"timeline-layer-1"}>
              {courseGenealogy.links.map((link) => {
                const sourcePos = new Vector2(
                  xScale(link.start),
                  yScale(link.source) ?? 1
                );
                const targetPos = new Vector2(
                  xScale(link.end),
                  yScale(link.target) ?? 1
                );
                const labelPos = sourcePos
                  .clone()
                  .add(targetPos.clone().sub(sourcePos).multiplyScalar(0.5))
                  .add(new Vector2(0, 2.5));
                return (
                  <g key={nanoid()}>
                    <path
                      key={nanoid()}
                      stroke={"black"}
                      d={
                        linkGenerator({
                          source: [sourcePos.x, sourcePos.y],
                          target: [targetPos.x, targetPos.y],
                        }) || ""
                      }
                      fill={"none"}
                    />
                    <g>
                      {[sourcePos, targetPos].map((p) => (
                        <EventPoint
                          key={nanoid()}
                          position={p}
                          fill={"white"}
                          stroke={"black"}
                          radius={1.5}
                        ></EventPoint>
                      ))}
                    </g>
                    {link.source === link.target && (
                      <PointLabel
                        position={labelPos}
                        placement={LabelPlacement.TOP}
                        style={{ fontSize: 7, fill: "bold" }}
                      >
                        <tspan fontWeight={"bold"}>{link.source}</tspan> (
                        {fDateYear(link.start)}â€“{fDateYear(link.end)})
                      </PointLabel>
                    )}
                  </g>
                );
              })}
            </g>
            <g id={"timeline-layer-2"}>
              {courseGenealogy.nodes.map((node) => {
                const pos = {
                  x: xScale(node.dateStart),
                  y: yScale(node.yOffset),
                } as Vector2;
                return node.data?.value === "-" ? (
                  <Cross
                    position={pos}
                    length={2}
                    halos={[{ size: 4, color: "white" }]}
                  />
                ) : (
                  <EventPoint
                    key={nanoid()}
                    position={pos}
                    radius={rScale(node.size ?? 1)}
                    fillOpacity={0.4}
                    fill={colorScale(node.fill ?? "")}
                  ></EventPoint>
                );
              })}
            </g>
          </Timeline>
          <ProportionalSymbolLegend
            x={margin}
            y={height / 3}
            data={courseGenealogy.nodes.map((n) => n.size ?? 0)}
            scaleRadius={rScale}
            title={"Graduates per course per year"}
            unitLabel={"graduates"}
          />
        </svg>
      </main>

      <Footer />
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const courseGenealogy = await getCourseGenealogy();
  return {
    props: {
      courseGenealogy,
    },
  };
};

export default CourseGenealogy;
