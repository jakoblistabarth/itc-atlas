import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import styles from "../../styles/home.module.css";
import BackToHome from "../../components/BackToHome";
import Footer from "../../components/Footer";
import Heading, { Headings } from "../../components/Heading";
import getCourseGenealogy from "../../lib/data/getCourseGenealogy";
import { linkHorizontal, scaleTime, scalePoint, ascending, extent } from "d3";
import { nanoid } from "nanoid";
import { CourseGenealogy } from "../../types/CourseGenealogy";
import Timeline from "../../components/charts/timeline/Timeline";

type Props = {
  courseGenealogy: CourseGenealogy;
};

const CourseGenealogy: NextPage<Props> = ({ courseGenealogy }) => {
  const source = [20, 100] as [number, number];
  const target = [100, 150] as [number, number];
  const linkGenerator = linkHorizontal();

  courseGenealogy.nodes.forEach(
    (node) => (node.dateStart = new Date(node.dateStart))
  );
  const nodes = courseGenealogy.nodes.filter(
    (node) => node.size && node.size > 0
  );

  courseGenealogy.links.forEach((link) => {
    link.start = new Date(link.start + "");
    link.end = new Date(link.end + "");
  });

  console.log(extent(courseGenealogy.links.map((link) => link.start)));
  console.log(extent(courseGenealogy.links.map((link) => link.end)));

  const width = 1080;
  const height = 600;
  const margin = 20;
  const xScale = scaleTime()
    .domain([new Date("1950"), new Date("2020")])
    .range([margin, width - margin]);
  // .nice();
  const yScale = scalePoint()
    .range([margin, height - margin])
    .domain(
      courseGenealogy.nodes
        .sort((a, b) => ascending(new Date(a.dateStart), new Date(b.dateStart)))
        .map((d) => d.yOffset)
    );

  return (
    <>
      <Head>
        <title>ITC's courses</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>Course Genealogy</Heading>

        <p className={styles.description}>Insights into ITC's courses.</p>

        <BackToHome />

        <svg width={width} height={height}>
          <Timeline
            position={[0, 0]}
            width={width}
            height={height}
            scaled={true}
            events={nodes}
            grid
          />
          {courseGenealogy.links.map((link) => {
            const sourcePos = [xScale(link.start), yScale(link.source)] as [
              number,
              number
            ];
            const targetPos = [xScale(link.end), yScale(link.target)] as [
              number,
              number
            ];
            return (
              <g key={nanoid()}>
                <g transform={`translate(${sourcePos[0]}, ${sourcePos[1]})`}>
                  {link.type == "start" && (
                    <text
                      x={-5}
                      textAnchor={"end"}
                      fill="red"
                      fontSize={"7"}
                      fontWeight="bold"
                    >
                      {link.source}
                    </text>
                  )}
                </g>
                <g>
                  {[sourcePos, targetPos].map((p) => (
                    <circle
                      key={nanoid()}
                      cx={p[0]}
                      cy={p[1]}
                      r={2}
                      fill={"red"}
                    />
                  ))}
                </g>
                <path
                  key={nanoid()}
                  stroke={"red"}
                  // d={linkGenerator({ sourcePos, targetPos }) || ""}
                  d={
                    linkGenerator({ source: sourcePos, target: targetPos }) ||
                    ""
                  }
                  fill={"none"}
                />
              </g>
            );
          })}
        </svg>
      </main>

      <Footer />
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const courseGenealogy = await getCourseGenealogy();
  return {
    props: {
      courseGenealogy,
    },
  };
};

export default CourseGenealogy;
