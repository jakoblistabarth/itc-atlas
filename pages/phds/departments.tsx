import * as d3 from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import type { Feature, FeatureCollection, MultiPolygon, Point } from "geojson";
import { nanoid } from "nanoid";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import * as topojson from "topojson-client";
import type { Topology } from "topojson-specification";
import Footer from "../../components/footer";
import Heading, { Headings } from "../../components/heading";
import BaseLayer from "../../components/map/BaseLayer";
import NominalLegend from "../../components/map/NominalLegend";
import ScaledPie, { pieDatum } from "../../components/map/ScaledPie";
import { color } from "../../lib/cartographic/colors";
import getCountries from "../../lib/data/getCountries";
import getPhdCandidates from "../../lib/data/getPhdCandidates";
import { Department, departmentColors } from "../../lib/mappings/departments";
import styles from "../../styles/home.module.css";
import type { PhdCandidate } from "../../types/PhdCandidate";
import { SymbolAppearance } from "../../types/SymbolAppearance";

type Props = {
  phdCandidates: PhdCandidate[];
  world: Topology;
};

const PhdDepartments: NextPage<Props> = ({ phdCandidates, world }) => {
  const count = d3.group(
    phdCandidates,
    (d) => d.country,
    (d) => d.department1
  );

  const featureCollection: FeatureCollection<MultiPolygon> = topojson.feature(
    world,
    world.objects.countries
  );

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: featureCollection.features
      .map((feature: Feature<MultiPolygon>) => {
        const departments = count.get(feature.properties?.iso3code);
        const departmentCount = departments
          ? Array.from(departments?.entries()).map(([key, value]) => {
              return {
                label: key,
                value: value.length,
              };
            })
          : null;
        const totalCount = departments
          ? Array.from(departments.values()).reduce(
              (sum, d) => sum + d.length,
              0
            )
          : null;
        const pointFeature: Feature<Point> = {
          type: "Feature",
          properties: {
            totalPhdCount: totalCount,
            departments: departmentCount,
            ...feature.properties,
          },
          geometry: {
            type: "Point",
            coordinates: [
              d3.geoCentroid(feature)[0],
              d3.geoCentroid(feature)[1],
            ],
          },
        };
        return pointFeature;
      })
      .filter((feature: Feature) => feature.properties?.totalPhdCount)
      .sort((a: Feature, b: Feature) =>
        d3.descending(a.properties?.totalPhdCount, b.properties?.totalPhdCount)
      ),
  };

  const legendEntries = points.features
    .reduce((acc: Department[], point) => {
      point.properties?.departments.forEach((department: pieDatum) => {
        if (!acc.includes(department.label as Department))
          acc.push(department.label as Department);
      });
      return acc;
    }, [])
    .map((department) => {
      return {
        label: department,
        color: departmentColors[department],
      };
    });

  const phdCount = Array.from(count.values()).map((d) =>
    Array.from(d.values()).reduce((sum, d) => sum + d.length, 0)
  );
  const min = d3.min(phdCount);
  const max = d3.max(phdCount);

  const scale = d3
    .scaleSqrt()
    .domain([min ?? 0, max ?? 10])
    .range([1, 100]);

  const projection = geoBertin1953();

  const pieStyle: SymbolAppearance = {
    stroke: {
      color: color.background,
      width: 1,
    },
  };

  return (
    <>
      <Head>
        <title>ITC's PhD candidates</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's PhD candidates</Heading>
        <svg width={1020} height={600}>
          <BaseLayer data={world} projection={projection} />
          <g id="symbols">
            {points.features.map((point) => {
              if (!point.properties?.departments) return;
              return (
                <ScaledPie
                  key={nanoid()}
                  xy={projection(point.geometry.coordinates)}
                  scale={scale}
                  colorScheme={Object.values(departmentColors)}
                  pieSize={point.properties?.totalPhdCount}
                  data={point.properties?.departments}
                  style={pieStyle}
                />
              );
            })}
          </g>
          <NominalLegend entries={legendEntries} />
          <g fontSize={10} transform="translate(0,10)">
            <text fontSize={12}>5 Countries with most PhD candidates</text>
            {points.features.slice(0, 5).map((feature, index) => (
              <g transform={`translate(0, ${20 + index * 15})`} key={nanoid()}>
                <text>
                  {feature.properties?.name}
                  <tspan> ({feature.properties?.totalPhdCount})</tspan>
                </text>
              </g>
            ))}
          </g>
        </svg>
      </main>
      <Footer />
    </>
  );
};

export const getStaticProps: Awaited<GetStaticProps<Props>> = async () => {
  const phdCandidates = await getPhdCandidates();
  const world = await getCountries();
  return {
    props: {
      phdCandidates,
      world,
    },
  };
};

export default PhdDepartments;
