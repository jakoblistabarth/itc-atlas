import * as d3 from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import type { Feature, FeatureCollection, MultiPolygon, Point } from "geojson";
import { nanoid } from "nanoid";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import * as topojson from "topojson-client";
import type { Topology } from "topojson-specification";
import Footer from "../../components/footer";
import Heading, { Headings } from "../../components/heading";
import BaseLayer from "../../components/map/BaseLayer";
import ScaledPie from "../../components/map/ScaledPie";
import getCountries from "../../lib/data/getCountries";
import getPhdCandidates from "../../lib/data/getPhdCandidates";
import { departmentColors } from "../../lib/mappings/departments";
import styles from "../../styles/home.module.css";
import type { PhdCandidate } from "../../types/PhdCandidate";

type Props = {
  phdCandidates: PhdCandidate[];
  world: Topology;
};

const PhdDepartments: NextPage<Props> = ({ phdCandidates, world }) => {
  const count = d3.group(
    phdCandidates,
    (d) => d.country,
    (d) => d.department1
  );

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: topojson
      .feature(world, world.objects.countries)
      .features.map((feature: Feature<MultiPolygon>) => {
        const departments = count.get(feature.properties?.iso3code);
        const departmentCount = departments
          ? Array.from(departments?.entries()).map(([key, value]) => {
              return {
                name: key,
                departmentPhdCount: value.length,
              };
            })
          : null;
        const totalCount = departments
          ? Array.from(departments.values()).reduce(
              (sum, d) => sum + d.length,
              0
            )
          : null;
        return {
          type: "Feature",
          properties: {
            totalPhdCount: totalCount,
            departments: departmentCount,
            ...feature.properties,
          },
          geometry: {
            coordinates: [
              d3.geoCentroid(feature)[0],
              d3.geoCentroid(feature)[1],
            ],
          },
        };
      })
      .filter((feature) => feature.properties.totalPhdCount),
  };

  const extent = d3.extent(
    Array.from(count.values()).map((d) =>
      Array.from(d.values()).reduce((sum, d) => sum + d.length, 0)
    )
  );

  const scale = d3.scaleSqrt().domain(extent).range([1, 100]);

  const projection = geoBertin1953();

  return (
    <>
      <Head>
        <title>ITC's PhD candidates</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's PhD candidates</Heading>
        <svg width={1020} height={600}>
          <BaseLayer data={world} projection={projection} />
          <g id="symbols">
            {points.features.map((point) => {
              if (!point.properties?.departments) return;
              return (
                <ScaledPie
                  key={nanoid()}
                  xy={projection(point.geometry.coordinates)}
                  scale={scale}
                  // colorScheme={Object.values(departmentColors)}
                  pieSize={point.properties?.totalPhdCount}
                  pieProperty={point.properties?.departments}
                  pieValue={"departmentPhdCount"}
                />
              );
            })}
          </g>
        </svg>
      </main>
      <Footer />
    </>
  );
};

export const getStaticProps: Awaited<GetStaticProps<Props>> = async () => {
  const phdCandidates = await getPhdCandidates();
  const world = await getCountries();
  return {
    props: {
      phdCandidates,
      world,
    },
  };
};

export default PhdDepartments;
