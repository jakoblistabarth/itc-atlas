import { geoBertin1953 } from "d3-geo-projection";
import type { NextPage } from "next";
import Head from "next/head";
import { Container, Heading } from "theme-ui";
import FlightsFlowMap from "../../components/FlightsFlowMap";
import Footer from "../../components/Footer";
import MapLayoutFluid from "../../components/map/layout/MapLayoutFluid";
import getCountries from "../../lib/data/getCountries";
import getOdMatrix from "../../lib/data/getOdMatrix";
import type { OdMatrix } from "../../types/OdMatrix";
import { SharedPageProps } from "../../types/Props";
import JoyRide, {
  Props as JoyrideProps,
  CallBackProps,
  STATUS,
} from "react-joyride";
import { useContext, useEffect, useState } from "react";
import TourBeacon from "../../components/TourBeacon";
import { MapContext } from "../../components/map/layout/MapContext";
import PointSymbol from "../../components/map/PointSymbol";
import { Vector2 } from "three";
import { Button } from "theme-ui";
import { MdTour } from "react-icons/md";

type Props = {
  odMatrix: OdMatrix;
} & SharedPageProps;

const Flights: NextPage<Props> = ({ odMatrix, neCountriesTopoJson }) => {
  const tour: JoyrideProps = {
    run: true,
    steps: [
      {
        content: (
          <>
            <h3>Hub Nairobi</h3>
            <p>
              NBO, the Nairobi airport is one of the most frequently travelled
              airports by ITC staff.
            </p>
          </>
        ),
        target: "#target1",
      },
      {
        content: <div>Up in the arctic sea there are hardly any travels.</div>,
        target: "#target2",
      },
      {
        content: (
          <div>
            Southasia has always been an important area of activity for ITC.
          </div>
        ),
        target: "#target3",
      },
    ],
  };
  const [{ steps, run }, setTour] = useState<JoyrideProps>(tour);

  const handleJoyrideCallback = (data: CallBackProps) => {
    const { status } = data;
    const finishedStatuses: string[] = [STATUS.FINISHED, STATUS.SKIPPED];

    if (finishedStatuses.includes(status)) {
      setTour(({ steps }) => ({ steps, run: false }));
    }
  };

  const [isSSR, setIsSSR] = useState(true);
  useEffect(() => {
    setIsSSR(false);
  }, []);

  return (
    <>
      <Head>
        <title>Flights</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      {!isSSR && (
        <JoyRide
          steps={steps}
          run={run}
          continuous
          showProgress
          showSkipButton
          //@ts-expect-error: only works with explicit as React.ElementType<BeaconRenderProps>
          beaconComponent={TourBeacon}
          callback={handleJoyrideCallback}
        />
      )}

      <Container>
        <main>
          <Heading as="h1">ITC&apos;s travel activity</Heading>
          <MapLayoutFluid projection={geoBertin1953()}>
            <FlightsFlowMap
              odMatrix={odMatrix}
              neCountriesTopoJson={neCountriesTopoJson}
            />
            <Targets />
          </MapLayoutFluid>
          {/* TODO: implement tour restarting */}
          <Button
            variant="muted"
            onClick={() => {
              console.log("restarting tour â€¦");
            }}
          >
            <MdTour style={{ marginRight: 5 }} />
            Restart Tour
          </Button>
        </main>
      </Container>

      <Footer />
    </>
  );
};

export async function getStaticProps() {
  const neCountriesTopoJson = getCountries();
  const [odMatrix] = await Promise.all([getOdMatrix()]);
  return {
    props: {
      odMatrix,
      neCountriesTopoJson,
    },
  };
}

export default Flights;

const Targets = () => {
  const { width, height, projection } = useContext(MapContext);
  return (
    <g>
      <PointSymbol
        position={new Vector2(...(projection([36.9238, -1.329]) ?? [0, 0]))}
        radius={10}
        id="target1"
        fill="transparent"
        opacity={0.25}
        strokeWidth={1}
        stroke={"black"}
      />
      <circle
        id="target2"
        r={70}
        fill="transparent"
        stroke={"black"}
        cx={width / 2}
        cy={height / 4}
      />
      <circle
        id="target3"
        r={50}
        fill="transparent"
        stroke={"black"}
        cx={width / 1.5}
        cy={height / 2}
      />
    </g>
  );
};
