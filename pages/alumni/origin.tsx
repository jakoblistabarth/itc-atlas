import * as d3 from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import Fuse from "fuse.js";
import type { Feature, FeatureCollection, MultiPolygon, Point } from "geojson";
import { nanoid } from "nanoid";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import * as topojson from "topojson-client";
import Footer from "../../components/Footer";
import Heading, { Headings } from "../../components/Heading";
import BaseLayer from "../../components/map/BaseLayer";
import PointSymbol from "../../components/map/PointSymbol";
import ProportionalSymbolLegend from "../../components/map/ProportionalSymbolLegend";
import getMapHeight from "../../lib/cartographic/getMapHeight";
import getAlumni from "../../lib/data/getAlumni";
import getCountries from "../../lib/data/getCountries";
import getPopulatedPlaces from "../../lib/data/getPopulatedPlaces";
import styles from "../../styles/home.module.css";
import { Alumni } from "../../types/Alumni";
import { NePopulatedPlaces } from "../../types/NeTopoJson";
import { SharedPageProps } from "../../types/Props";

type Props = {
  alumni: Alumni[];
  populatedPlaces: NePopulatedPlaces;
} & SharedPageProps;

const AlumniOrigin: NextPage<Props> = ({
  alumni,
  populatedPlaces,
  neCountriesTopoJson,
}) => {
  const neCountriesGeoJson = topojson.feature(
    neCountriesTopoJson,
    neCountriesTopoJson.objects.ne_admin_0_countries
  );

  const count = d3.rollup(
    alumni,
    (d) => d.length,
    (v) => v.city
  );
  const alumniCities = Array.from(count.keys()).filter(
    (city) => city && city !== null
  );

  const geometries = populatedPlaces.objects.ne_populated_places.geometries;
  const cities = geometries.map((geometry) => geometry.properties);
  const cityNames = cities.map((city) => city?.NAME_EN);

  const fuseOptions = {
    includeScore: true,
    minMatchCharLength: 4,
    threshold: 0.2,
  };

  const fuse = new Fuse(cityNames, fuseOptions);

  // const citiesNew = alumniCities.flatMap((cityName) => {
  //   if (!cityName) return [];
  //   const results = fuse.search(cityName);
  //   if (!results.length) return [];
  //   const city = results[0].item;
  //   if (!city) return [];
  //   return [
  //     {
  //       geometry: {
  //         type: "Point",
  //         coordinates: [city.LATITUDE, city.LONGITUDE],
  //       },
  //       properties: {
  //         name: city,
  //         originalString: cityName,
  //         alumniCount: count.get(cityName),
  //       },
  //     },
  //   ];
  // });
  // console.log(citiesNew.length, alumniCities.length);

  // const dimension = {
  //   width: 1280,
  //   height: 0,
  // };

  // const projection = geoBertin1953();
  // dimension.height = getMapHeight(dimension.width, projection);

  // const points: FeatureCollection<Point> = {
  //   type: "FeatureCollection",
  //   features: neCountriesGeoJson.features
  //     .map((feature) => {
  //       const staffCount = count.get(feature.properties?.ADM0_A3_NL)?.length;
  //       const pointFeature: Feature<Point> = {
  //         type: "Feature",
  //         properties: {
  //           staffCount,
  //           ...feature.properties,
  //         },
  //         geometry: {
  //           type: "Point",
  //           coordinates: [
  //             d3.geoCentroid(feature)[0],
  //             d3.geoCentroid(feature)[1],
  //           ],
  //         },
  //       };
  //       return pointFeature;
  //     })
  //     .filter((feature: Feature) => feature.properties?.staffCount)
  //     .sort((a: Feature, b: Feature) =>
  //       d3.descending(a.properties?.staffCount, b.properties?.staffCount)
  //     ),
  // };

  // const staffCount = points.features.map(
  //   (point) => point.properties?.staffCount
  // );
  // const min = d3.min(staffCount);
  // const max = d3.max(staffCount);

  // const scale = d3
  //   .scaleSqrt()
  //   .domain([min, max])
  //   .range([1, dimension.width / 15]);

  return (
    <>
      <Head>
        <title>ITC's staff origin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's alumni origin</Heading>
        {/* <svg width={dimension.width} height={dimension.height}>
          <BaseLayer countries={neCountriesTopoJson} projection={projection} />
          <g id="symbols">
            {points.features.map((point) => (
              <PointSymbol
                key={nanoid()}
                xy={projection(point.geometry.coordinates)}
                radius={scale(point.properties?.staffCount)}
              />
            ))}
          </g>
          <ProportionalSymbolLegend
            data={points.features.map(
              (feature) => feature.properties?.staffCount
            )}
            scaleRadius={scale}
            title={"Staff members per Country"}
            unitLabel={"Staff member"}
          />
        </svg> */}
      </main>
      <Footer />
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const [alumni, populatedPlaces, neCountriesTopoJson] = await Promise.all([
    getAlumni(),
    getPopulatedPlaces("10m"),
    getCountries(),
  ]);

  return {
    props: {
      alumni,
      populatedPlaces,
      neCountriesTopoJson,
    },
  };
};

export default AlumniOrigin;
