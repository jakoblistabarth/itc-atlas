import { descending, max, min, rollup, rollups, scaleSqrt, sum } from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import Fuse from "fuse.js";
import type { Feature, FeatureCollection, Point } from "geojson";
import { nanoid } from "nanoid";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import * as topojson from "topojson-client";
import Footer from "../../components/Footer";
import Heading, { Headings } from "../../components/Heading";
import BaseLayer from "../../components/map/BaseLayer";
import PointSymbol from "../../components/map/PointSymbol";
import ProportionalSymbolLegend from "../../components/map/ProportionalSymbolLegend";
import getMapHeight from "../../lib/cartographic/getMapHeight";
import getAlumni from "../../lib/data/getAlumni";
import getCountries from "../../lib/data/getCountries";
import getPopulatedPlaces from "../../lib/data/getPopulatedPlaces";
import styles from "../../styles/home.module.css";
import { Alumni } from "../../types/Alumni";
import { NePopulatedPlaces } from "../../types/NeTopoJson";
import { SharedPageProps } from "../../types/Props";

type Props = {
  alumni: Alumni[];
  nePopulatedPlaces: NePopulatedPlaces;
} & SharedPageProps;

const AlumniOrigin: NextPage<Props> = ({
  alumni,
  nePopulatedPlaces,
  neCountriesTopoJson,
}) => {
  const nePopulatedPlacesGeoJson = topojson.feature(
    nePopulatedPlaces,
    nePopulatedPlaces.objects.ne_populated_places
  ) as FeatureCollection<Point>;

  const count = rollups(
    alumni,
    (d) => d.length,
    (v) => v.city
  )
    .map((d) => ({
      city: d[0],
      alumni: d[1],
    }))
    .filter((d) => d.alumni >= 10)
    .filter((d) => d.city)
    .sort((a, b) => descending(a.alumni, b.alumni));

  const populatedPlaces = nePopulatedPlacesGeoJson.features;
  const neCities = populatedPlaces.map((geometry) => geometry.properties);

  const fuseOptions = {
    includeScore: true,
    minMatchCharLength: 4,
    threshold: 0.2,
    keys: ["NAME_EN"],
  };
  const fuse = new Fuse(neCities, fuseOptions);

  const citiesMatched = count.flatMap((alumniEntry) => {
    const results = fuse.search(alumniEntry.city);
    if (!results.length) return [];
    const city = results[0].item;
    if (!city) return [];
    return [
      {
        coordinates: [city.LONGITUDE, city.LATITUDE],
        name: city.NAME_EN,
        originalString: alumniEntry.city,
        alumniCount: alumniEntry.alumni,
      },
    ];
  });

  const citiesGrouped = rollup(
    citiesMatched,
    (v) => sum(v, (d) => d.alumniCount),
    (d) => d.name
  );

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: citiesMatched
      .map((city) => {
        const feature: Feature<Point> = {
          type: "Feature",
          geometry: {
            type: "Point",
            coordinates: city.coordinates,
          },
          properties: {
            ...city,
            alumniCount: citiesGrouped.get(city.name),
          },
        };
        return feature;
      })
      .filter((feature: Feature) => feature.properties?.alumniCount)
      .sort((a: Feature, b: Feature) =>
        descending(a.properties?.alumniCount, b.properties?.alumniCount)
      ),
  };

  const dimension = {
    width: 1280,
    height: 0,
  };

  const projection = geoBertin1953();
  dimension.height = getMapHeight(dimension.width, projection);

  const alumniCount = points.features.map(
    (point) => point.properties?.alumniCount
  );
  const alumniMin = min(alumniCount);
  const alumniMax = max(alumniCount);

  const scale = scaleSqrt().domain([0, alumniMax]).range([0, 50]);

  return (
    <>
      <Head>
        <title>ITC's alumni origin</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's alumni origin</Heading>
        <svg width={dimension.width} height={dimension.height}>
          <BaseLayer countries={neCountriesTopoJson} projection={projection} />
          <g id="symbols">
            {nePopulatedPlacesGeoJson.features.map((point) => (
              <PointSymbol
                key={nanoid()}
                position={projection(point.geometry.coordinates)}
                radius={1}
                style={{ strokeWidth: 0, fill: "darkgrey", fillOpacity: 1 }}
              />
            ))}
          </g>
          <g id="symbols">
            {points.features.map((point) => (
              <PointSymbol
                key={nanoid()}
                position={projection(point.geometry.coordinates)}
                radius={scale(point.properties?.alumniCount)}
                style={{
                  fill: "red",
                  stroke: "red",
                  strokeWidth: 0.5,
                  fillOpacity: 0.1,
                }}
              />
            ))}
          </g>
          <ProportionalSymbolLegend
            data={points.features.map(
              (feature) => feature.properties?.alumniCount
            )}
            scaleRadius={scale}
            title={"Graduates per City"}
            unitLabel={"graduate"}
          />
        </svg>
      </main>
      <Footer />
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const [alumni, nePopulatedPlaces, neCountriesTopoJson] = await Promise.all([
    getAlumni(),
    getPopulatedPlaces("10m"),
    getCountries(),
  ]);

  return {
    props: {
      alumni,
      nePopulatedPlaces,
      neCountriesTopoJson,
    },
  };
};

export default AlumniOrigin;
