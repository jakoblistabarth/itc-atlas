import { descending, max, rollup, rollups, scaleSqrt, sum } from "d3";
import { geoBertin1953 } from "d3-geo-projection";
import type {
  Feature,
  FeatureCollection,
  MultiPolygon,
  Polygon,
  Point,
} from "geojson";
import { nanoid } from "nanoid";
import type { GetStaticProps, NextPage } from "next";
import Head from "next/head";
import { Vector2 } from "three";
import { feature } from "topojson-client";
import Footer from "../../components/Footer";
import Heading, { Headings } from "../../components/Heading";
import BaseLayer from "../../components/map/BaseLayer";
import PointLabel from "../../components/map/PointLabel";
import PointSymbol from "../../components/map/PointSymbol";
import ProportionalCircleLegend from "../../components/map/ProportionalCircleLegend";
import getMapHeight from "../../lib/cartographic/getMapHeight";
import getAlumni from "../../lib/data/getAlumni";
import getCentroidByIsoCode from "../../lib/data/getCentroidByIsoCode";
import getCountries from "../../lib/data/getCountries";
import styles from "../../styles/home.module.css";
import { Alumni } from "../../types/Alumni";
import { LabelPlacement } from "../../types/LabelPlacement";
import { SharedPageProps } from "../../types/Props";

type Props = {
  alumni: Alumni[];
} & SharedPageProps;

const AlumniOrigin: NextPage<Props> = ({ alumni, neCountriesTopoJson }) => {
  const mscs = alumni
    .filter((d) => d.level === "MSC")
    .filter((d) => {
      //filter out some of the land administration alumni ðŸ¤·
      return !d.courseCode.match(".*LS/.*");
    });
  const count = new Map(
    rollups(
      mscs,
      (d) => d.length,
      (v) => v.countryISO3
    )
      .filter(([code, count]) => code)
      .sort(([a_, aCount], [b_, bCount]) => descending(aCount, bCount))
  );

  const countries = feature(
    neCountriesTopoJson,
    neCountriesTopoJson.objects.ne_admin_0_countries
  ) as FeatureCollection<MultiPolygon | Polygon>;

  const points: FeatureCollection<Point> = {
    type: "FeatureCollection",
    features: countries.features
      .map((country) => {
        const isoCode = country.properties?.ADM0_A3_NL;
        const pos = getCentroidByIsoCode(isoCode);
        const feature: Feature<Point> = {
          type: "Feature",
          geometry: {
            type: "Point",
            coordinates: [pos?.x ?? 0, pos?.y ?? 0],
          },
          properties: {
            ...country.properties,
            alumniCount: count.get(isoCode),
          },
        };
        return feature;
      })
      .filter((feature: Feature) => feature.properties?.alumniCount)
      .sort((a: Feature, b: Feature) =>
        descending(a.properties?.alumniCount, b.properties?.alumniCount)
      ),
  };

  const dimension = {
    width: 1280,
    height: 0,
  };

  const projection = geoBertin1953();
  dimension.height = getMapHeight(dimension.width, projection);

  const alumniCount = points.features.map(
    (point) => point.properties?.alumniCount
  );
  const alumniMax = max(alumniCount);

  const scale = scaleSqrt().domain([0, alumniMax]).range([0, 50]);

  return (
    <>
      <Head>
        <title>ITC's alumni country of origin </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading Tag={Headings.H1}>ITC's MSc alumni country of origin</Heading>
        <svg width={dimension.width} height={dimension.height}>
          <BaseLayer countries={neCountriesTopoJson} projection={projection} />
          <g id="alumni-countries-symbols">
            {points.features.map((point) => (
              <PointSymbol
                key={nanoid()}
                position={
                  new Vector2(...projection(point.geometry.coordinates))
                }
                radius={scale(point.properties?.alumniCount)}
                style={{
                  fill: "teal",
                  stroke: "teal",
                  strokeWidth: 0.5,
                  fillOpacity: 0.1,
                }}
              />
            ))}
          </g>
          <g id="alumni-country-labels">
            {points.features.slice(0, 10).map((point) => {
              const pos = new Vector2(
                ...projection(point.geometry.coordinates)
              );
              return (
                <PointLabel
                  key={nanoid()}
                  position={pos}
                  placement={LabelPlacement.CENTER}
                  style={{ fill: "teal", fontSize: 6 }}
                >
                  {point.properties?.NAME}
                </PointLabel>
              );
            })}
          </g>
          <ProportionalCircleLegend
            data={points.features.map(
              (feature) => feature.properties?.alumniCount
            )}
            scaleRadius={scale}
            title={"Graduates per country"}
            unitLabel={"graduate"}
            showFunction={false}
          />
        </svg>
      </main>
      <Footer />
    </>
  );
};

export const getStaticProps: GetStaticProps<Props> = async () => {
  const [alumni, neCountriesTopoJson] = await Promise.all([
    getAlumni(),
    getCountries(),
  ]);

  return {
    props: {
      alumni,
      neCountriesTopoJson,
    },
  };
};

export default AlumniOrigin;
